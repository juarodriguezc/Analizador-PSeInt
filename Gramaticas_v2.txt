
---------------------------------------------------------------------------------------------------------
"  v1      gramática

"S -> FUN_SUB_ALGPRO MAIN FUN_SUB_ALGPRO \n" +
"FUN_SUB_ALGPRO -> FUNCION FUN_SUB_ALGPRO \n" +
"FUN_SUB_ALGPRO -> e \n" +

"FUNCION -> HEADER_FUNCION BODY_FUNCION END_FUNCION \n" +

"HEADER_FUNCION -> TOK_FUNCION RETURN_FUNCION id PARAMETERS \n" +

"TOK_FUNCION -> funcion \n" +
"TOK_FUNCION -> subalgoritmo \n" +
"TOK_FUNCION -> subproceso \n" +

"RETURN_FUNCION -> id token_asig \n" +
"RETURN_FUNCION -> e \n" +

"PARAMETERS -> token_par_izq PARAMS token_par_der \n" +
"PARAMETERS -> e \n" +

"PARAMS -> id PARAMS_ \n" +
"PARAMS_ -> token_coma PARAMS \n" +
"PARAMS_ -> e \n" +

"BODY_FUNCION -> id \n" +

"END_FUNCION -> finfuncion \n" +
"END_FUNCION -> finsubalgoritmo \n" +
"END_FUNCION -> finsubproceso \n"




"
"Ejemplo de prueba"
SubProceso ans <- doble(x)
    ans
FinSubProceso

---------------------------------------------------------------------------------------------------------
"  v2      gramática

"S -> TOK_FUNCION RETURN_FUNCION PARAMETERS BODY_FUNCION END_FUNCION\n" +

"TOK_FUNCION -> funcion \n" +
"TOK_FUNCION -> subalgoritmo \n" +
"TOK_FUNCION -> subproceso \n" +

"RETURN_FUNCION -> id RETURN_FUNCION_ \n" +
"RETURN_FUNCION_ -> token_asig id \n" +
"RETURN_FUNCION_ -> e \n" +

"PARAMETERS -> token_par_izq PARAMS token_par_der \n" +
"PARAMETERS -> e \n" +

"PARAMS -> id PARAMS_ \n" +
"PARAMS -> e \n" +
"PARAMS_ -> token_coma id PARAMS_ \n" +
"PARAMS_ -> e \n" +

"BODY_FUNCION -> COMMANDS \n" +

"COMMANDS -> COMMAND COMMANDS \n" +
"COMMANDS -> e \n" +

"COMMAND -> SI_ESTRUCT \n" +

"SI_ESTRUCT -> si CONDICION entonces COMMANDS SINO finsi \n" +


"CONDICION -> token_neg CONDICION \n" +

"CONDICION -> token_par_izq CONDICION token_par_der CONDICION_ \n" +

"CONDICION -> COND_FUNC CONDICION_ \n" +

"COND_FUNC -> id ID_FUNC \n" +
"COND_FUNC -> token_entero \n" +
"COND_FUNC -> token_real \n" +
"COND_FUNC -> token_cadena \n" +
"COND_FUNC -> verdadero \n" +
"COND_FUNC -> falso \n" +

"ID_FUNC -> token_par_izq PARAMS token_par_der \n" +
"ID_FUNC -> e \n" +

"CONDICION_ -> COMP_OPERATOR CONDICION \n" +
"CONDICION_ -> e \n" +

"COMP_OPERATOR -> token_o \n" +
"COMP_OPERATOR -> token_y \n" +
"COMP_OPERATOR -> token_mod \n" +
"COMP_OPERATOR -> token_igual \n" +
"COMP_OPERATOR -> token_dif \n" +
"COMP_OPERATOR -> token_menor \n" +
"COMP_OPERATOR -> token_mayor \n" +
"COMP_OPERATOR -> token_menor_igual \n" +
"COMP_OPERATOR -> token_mayor_igual \n" +

"SINO -> sino COMMANDS\n" +
"SINO -> e \n" +

"END_FUNCION -> finfuncion \n" +
"END_FUNCION -> finsubalgoritmo \n" +
"END_FUNCION -> finsubproceso \n"




"
"Ejemplo de prueba"
SubProceso ans <- axis (var1, var2, var3)
    Si x<>trunc(x) Entonces
        Si x<>trunc(x) Entonces
            
        finsi
    sino
        Si x<>trunc(x) Entonces
            
        finsi
    finsi
    
finsubalgoritmo

SubProceso axis()
    
finsubalgoritmo

